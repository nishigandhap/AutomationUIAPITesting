#!/usr/bin/env node
// Based on https://github.com/reactjs/react-codemod/blob/master/bin/cli.js
import { globbySync } from 'globby';
import inquirer from 'inquirer';
import meow from 'meow';
import { runTransforms } from './transforms.js';
import { defaultOutputFolder } from '../constants.js';
// CLI
const cli = meow(`
Usage:      npx cypress-chrome-recorder <path> [options]

Examples:   npx cypress-chrome-recorder recording.json
            npx cypress-chrome-recorder recordings/*.json

Options:
  -f, --force       Bypass Git safety checks and force script to run
  -d, --dry         Dry run (no files are output)
  -o, --output      Output location of the files generated by the exporter
  -p, --print       Print transformed files to stdout, useful for development,`, {
    importMeta: import.meta,
    flags: {
        force: {
            type: 'boolean',
            alias: 'f',
        },
        dry: {
            type: 'boolean',
            alias: 'd',
        },
        output: {
            type: 'string',
            alias: 'o',
        },
        print: {
            type: 'boolean',
            alias: 'p',
        },
    },
});
function expandedFilePaths(filesBeforeExpansion) {
    const shouldExpandFiles = filesBeforeExpansion.some((file) => file.includes('*'));
    return shouldExpandFiles
        ? globbySync(filesBeforeExpansion)
        : filesBeforeExpansion;
}
inquirer
    .prompt([
    {
        type: 'input',
        name: 'files',
        message: 'Which directory or files should be translated from Recorder JSON to Cypress?',
        when: () => !cli.input.length,
        default: '.',
        filter: (files) => files
            .trim()
            .split(/\s+/)
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .filter((v) => v),
    },
    {
        type: 'input',
        name: 'outputPath',
        message: 'Where should the exported files be output?',
        when: () => !cli.input.length,
        default: 'cypress/integration',
    },
])
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .then((answers) => {
    var _a;
    const { files, outputFolder } = answers;
    const filesBeforeExpansion = cli.input.length ? cli.input : files;
    const filesExpanded = expandedFilePaths(filesBeforeExpansion);
    const outputPath = ((_a = cli.flags.output) === null || _a === void 0 ? void 0 : _a.length)
        ? cli.flags.output
        : outputFolder;
    if (!filesExpanded.length) {
        console.log(`No files found matching ${filesBeforeExpansion.join(' ')}`);
        return null;
    }
    return runTransforms({
        files: filesExpanded,
        outputPath: outputPath !== null && outputPath !== void 0 ? outputPath : defaultOutputFolder,
        flags: cli.flags,
    });
})
    .catch((errors) => {
    console.log('errors: ', errors);
});
