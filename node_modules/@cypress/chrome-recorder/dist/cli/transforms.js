import path from 'path';
import fs, { readFileSync } from 'fs';
import chalk from 'chalk';
import { cypressStringifyChromeRecording } from '../main.js';
const __dirname = path.resolve(path.dirname('.'));
async function exportFileToFolder({ stringifiedFile, testName, outputFolder, outputPath, }) {
    fs.writeFile(path.join(outputFolder, `/${testName}.cy.js`), stringifiedFile, (err) => {
        var _a;
        if (!err) {
            console.log(chalk.green(`\n${testName}.json exported to ${outputPath}/${testName}.spec.js\n`));
        }
        if (err) {
            if ((_a = err === null || err === void 0 ? void 0 : err.path) === null || _a === void 0 ? void 0 : _a.includes('cypress/integration')) {
                const outputFolder = path.join(__dirname, 'cypress/e2e');
                const outputPath = 'cypress/e2e';
                exportFileToFolder({
                    stringifiedFile,
                    testName,
                    outputFolder,
                    outputPath,
                });
            }
            else {
                console.log(chalk.yellow(`\nThere was an issue writing the output to ${outputPath}. Please check that it exists and try again.`));
            }
        }
    });
}
export async function runTransforms({ files, outputPath, flags, }) {
    const transformPath = path.join(__dirname, '/dist/main.js');
    const outputFolder = path.join(__dirname, outputPath);
    const { dry, print } = flags;
    const args = ['-t', transformPath].concat(files);
    if (dry) {
        args.push('--dry');
    }
    if (print) {
        args.push('--print');
    }
    return files.map(async (file) => {
        console.log(chalk.green(`Running Cypress Chrome Recorder on ${file}\n`));
        const recordingContent = readFileSync(`${file}`, 'utf8');
        const stringifiedFile = await cypressStringifyChromeRecording(recordingContent);
        if (!stringifiedFile) {
            return;
        }
        const fileName = file.split('/').pop();
        const testName = fileName ? fileName.replace('.json', '') : undefined;
        if (dry) {
            console.log(stringifiedFile);
        }
        else if (!testName) {
            console.log(chalk.red('No file or folder was found to export. Please try again.'));
        }
        else {
            exportFileToFolder({
                stringifiedFile,
                testName,
                outputFolder,
                outputPath,
            });
        }
    });
}
